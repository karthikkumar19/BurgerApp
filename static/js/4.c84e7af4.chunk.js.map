{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","switchAuthModeHandler","prevState","submitHandler","preventDefault","props","onAuth","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.c84e7af4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, {Component} from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\nimport {updateObject , checkValidity} from '../../shared/utility';\n\nclass Auth extends Component {\n\n    state={\n        controls:{\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Your Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength:6\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        isSignup:true\n    }\n\n    componentDidMount(){\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n\n    \n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls,{\n            [controlName]: updateObject(this.state.controls[controlName],{\n                value:event.target.value,\n                valid:checkValidity(event.target.value,this.state.controls[controlName].validation),\n                touched:true\n            }) \n        });\n        this.setState({controls:updatedControls});\n    }\n\n    switchAuthModeHandler = () =>{\n        this.setState(prevState => {\n            return{isSignup: !prevState.isSignup};\n        })\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignup);\n    }\n\n    render(){\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n        let form = formElementsArray.map( formElement => (\n            <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n        ));\n\n        if(this.props.loading){\n            form = <Spinner/>\n        }\n\n        let errorMessage = null;\n\n        if(this.props.error){\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            )\n        }\n\n        let authRedirect = null;\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return(\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button clicked={this.switchAuthModeHandler}\n                 btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP' }</Button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading:state.auth.loading,\n        error:state.auth.error,\n        isAuthenticated:state.auth.token != null,\n        buildingBurger:state.burgerBuilder.building,\n        authRedirectPath:state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email,password,isSignup)),\n        onSetAuthRedirectPath : () => dispatch(actions.setAuthRedirectPath('/'))\n\n    };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);","import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};"],"sourceRoot":""}